import json,httplib
from terminaltables import AsciiTable


import ConfigParser
Config = ConfigParser.ConfigParser()
Config.read("config.ini")
applicationId = Config.get("appinfo","APPLICATION_ID")
apiKey = Config.get("appinfo","API_KEY")


def setupUsers(matches):
  global usersList
  usersList = []
  try:
    for i in matches:
      player1 = i["player1"]["objectId"]
      player2 = i["player2"]["objectId"]
      # Append all players to the list. If player exists in the list do not add
      if [player1] not in usersList:
        usersList.append([player1])

      if [player2] not in usersList:
        usersList.append([player2])
  except KeyError:
    print "Keyerror"

   # Setup the list to contain records with initialized 6 zeroes
  for i in usersList:
    i.extend([0,0,0,0,0,0])

  return usersList 


class Parse(object):
  @staticmethod
  def queryParse(collection):
    connection = httplib.HTTPSConnection('api.parse.com', 443)
    connection.connect()
    connection.request('GET', '/1/classes/' + collection, '', {
             "X-Parse-Application-Id": applicationId,
                    "X-Parse-REST-API-Key": apiKey 
                         })
    parse = json.loads(connection.getresponse().read())
    return parse
  
  @staticmethod
  def getMatch():
    return "Match"

  @staticmethod
  def getUser():
    return "User"

  @staticmethod
  def getAlert():
    return "Alert"

  @staticmethod
  def getFriendship():
    return "Friendship"

  
class calculateResults(object):

  def isAccepted(self,match):
    if match == "accept":
      return True

  def getPlayer(self, player, match):
    if player == match["player1"]["objectId"]:
      print "player1"
    if player == match["player2"]["objectId"]:
      print "player2"

    else:
      return False

  def calculatePlayed(self, player1, player2):
    for idx, user in enumerate(usersList):
      if user[0] == player1 or user[0] == player2:
        usersList[idx][1] += 1 

  def calculateResult(self, match, player1, player2):
      if match["score1"] > match["score2"]:
        usersList[player1][2] += 1 # Win
        usersList[player2][3] += 1 # Loss
      elif match["score1"] < match["score2"]:
        usersList[player1][3] += 1 #Loss
        usersList[player2][2] += 1 # Win
      else:
        usersList[player2][4] += 1 
        usersList[player2][4] += 1

  def calculateFor(object):
    usersList[object][5] += i["score1"] 

  def calculateConceded(object):
    usersList[object][6] += i["score2"] 


#  def calculateResults(usersList):
#      for idx, item  in enumerate(usersList):
#        # Player 1 Results
#        if player1 == usersList[idx][0] and singleMatch[idx]["status"] == "accept":
#          usersList[idx][1] += 1 # Calculate number of games
#          usersList[idx][5] += i["score1"] # Calculate goals scored
#          usersList[idx][6] += i["score2"] # Calculate goals conceded
#          if i["score1"] > i["score2"]:
#            usersList[idx][2] += 1 # Calculate wins 
#          elif i["score1"] < i["score2"]:
#            usersList[idx][3] += 1 # Calculate losses
#          else:
#            usersList[idx][4] += 1 # Calculate draws 
#
#        # Player 2 Results
#        if i["player2"]["objectId"] == usersList[idx][0] and singleMatch[idx]["status"] == "accept":
#          usersList[idx][1] += 1 # Calculate number of games
#          usersList[idx][5] += i["score2"] # Calculate goals scored
#          usersList[idx][6] += i["score1"] # Calculate goals conceded
#          if i["score2"] > i["score1"]:
#            usersList[idx][2] += 1 # Calculate wins 
#          elif i["score2"] < i["score1"]:
#            usersList[idx][3] += 1 # Calculate losses
#          else:
#            usersList[idx][4] += 1 # Calculate draws 
#    return usersList 


def calculateHeadToHead():
  pass

def prettify(table_data):
  tableHeaderList = [["User ID", "Played", "Wins", "Losses", "Draws", "Goals For", "Goals Conceded"]]
  # Convert to int to strings to setup for terminaltable library requirements 
  for i in range(0, len(table_data)):
    table_data[i] = map(str, table_data[i]) 
  final_table = tableHeaderList + table_data
  pretty_table = AsciiTable(final_table)
  print "\nCURRRVA FULL RECORDS FOR ALL USERS"
  print pretty_table.table
   
def main():
  # Query Parse and get all matches
  matchCollection = Parse.getMatch()
  match = Parse.queryParse(matchCollection)
  allMatches = match["results"]

  # Setup a list for users
  usersList = setupUsers(allMatches)
  
  calculate = calculateResults()
  

  for user in usersList:
    for match in allMatches:
      print calculate.getPlayer(user, match)
      if user == calculate.getPlayer(user,match):
        try:
          if calculate.isAccepted(match["status"]):
            print "yay"
            #calculate.calculatePlayed(player1, player2)
            #calculate.calculateResult(match, player1, player2)

                
        except KeyError:
          pass
    
  # fullRecordList = calculateResults(usersList)
  # prettify(fullRecordList)


if __name__ == "__main__":
  main()
